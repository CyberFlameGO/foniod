version: 2.1
commands:
  cargo_build:
    parameters:
      type:
        type: enum
        enum: ["release", "debug"]
      flags:
        type: string
        default: ""
      binary:
        type: string
        default: "target/release/ingraind"
      condition:
        type: string
        default: "true"
    steps:
      - run:
          name: Build
          command: |
              mkdir -p /build/binaries
              if ! << parameters.condition >>; then
                exit 0;
              fi
              if [ "<< parameters.type >>" = "release" ]; then
                cargo test << parameters.flags >> --release || exit 1
                cargo build << parameters.flags >> --release || exit 1
                cp << parameters.binary >> /build/binaries/ingraind
                sha256sum /build/binaries/ingraind
              else
                cargo test << parameters.flags >> || exit 1
                cargo build << parameters.flags >> || exit 1
                cp << parameters.binary >> /build/binaries/ingraind-debug
                sha256sum /build/binaries/ingraind-debug
              fi
              /usr/local/cargo/bin/sccache -s || true
      - store_artifacts:
          path: /build/binaries
          destination: ingraind-binaries

jobs:
  terraform:
    parameters:
      ami:
        type: string
        default: "latest"
      binary:
        type: string
        default: "target/x86_64-unknown-linux-musl/release/ingraind"
    working_directory: /build
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /build
      - run:
          name: Deploy
          command: |
            cd tests/terraform
            cp /build/<< parameters.binary >> ./ingraind
            ./run-amd64.sh << parameters.ami >>

  terraform_arm:
    parameters:
      ami:
        type: string
        default: "ubuntu-arm64-1910"
    working_directory: /build
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /build
      - run:
          name: Deploy
          command: |
            cd tests/terraform
            ./run-arm64.sh << parameters.ami >>

  ubuntu:
    parameters:
      tag:
        type: string
        default: "18.04"
    working_directory: /build
    resource_class: large
    docker:
      - image: quay.io/redsift/ingraind-build:<< parameters.tag >>
    steps:
      - checkout
      - run:
          name: Configure env vars
          command: |
              echo export KERNEL_SOURCE=/lib/modules/$(ls /lib/modules |head -n1)/build/ |tee $BASH_ENV
      - cargo_build:
          type: release
          # only do release builds for terraform workflows
          condition: "[ -n \"$AWS_EC2_SSH_KEY_ID\" ]"
          binary: target/release/ingraind

      - persist_to_workspace:
          root: "./"
          paths:
            - "target/release/ingraind"

  fedora:
    working_directory: /build
    resource_class: large
    docker:
      - image: quay.io/redsift/ingraind-build:fedora
    steps:
      - checkout
      - run:
          name: Configure env vars
          command: |
            echo export KERNEL_SOURCE=/usr/src/kernels/$(rpm -qa kernel-devel |cut -d- -f3-)/ |tee $BASH_ENV

      - cargo_build:
          type: debug
          flags: --target=x86_64-unknown-linux-musl
          binary: target/x86_64-unknown-linux-musl/debug/ingraind

      - cargo_build:
          type: release
          flags: --target=x86_64-unknown-linux-musl
          # only do release builds for terraform workflows
          condition: "[ -n \"$AWS_EC2_SSH_KEY_ID\" ]"
          binary: target/x86_64-unknown-linux-musl/release/ingraind

      - persist_to_workspace:
          root: "./"
          paths:
            - "target/x86_64-unknown-linux-musl/release/ingraind"

  gke:
    parameters:
      version:
        type: string
      git_sha:
        type: string
    working_directory: /build
    resource_class: large
    docker:
      - image: quay.io/redsift/ingraind-build:20.04
    steps:
      - checkout

      - run:
          name: Install deps
          command: |
            apt-get update
            apt-get install -y build-essential bc kmod cpio libncurses5-dev gcc-8

      - run:
          name: Configure kernel tree
          command: |
            mkdir cos-kernel && cd cos-kernel
            wget -O kernel.tgz https://cos.googlesource.com/third_party/kernel/+archive/<< parameters.git_sha >>.tar.gz
            tar -xf kernel.tgz
            zcat /build/tests/gke/config-gke-<< parameters.version >>+.gz > .config
            make olddefconfig
            make prepare CC=gcc-8
            echo export KERNEL_SOURCE=/build/cos-kernel >> $BASH_ENV
            cd ..

      - cargo_build:
          type: release
          binary: target/release/ingraind

      - persist_to_workspace:
          root: "./"
          paths:
            - "target/release/ingraind"

  run_test_gke:
    parameters:
      version:
        type: string
    environment:
      GCLOUD_PROJECT: ingrain-playground
      GCLOUD_PRIMARY_ZONE: europe-west1-b
      GCLOUD_PRIMARY_CLUSTER: ingraind-test-cluster
    working_directory: /build
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - run:
          name: Setup credentials
          command: |
            if [ -z "$GCLOUD_SERVICE_KEY" ]; then
              circleci-agent step halt
            fi
            gcloud auth activate-service-account --key-file <(echo ${GCLOUD_SERVICE_KEY})
            gcloud config set project ${GCLOUD_PROJECT}
            gcloud container clusters get-credentials ${GCLOUD_PRIMARY_CLUSTER} --zone ${GCLOUD_PRIMARY_ZONE}

      - run:
          name: Deploy
          command: |
            cd tests/gke
            ./run-test.sh $DOCKER_IMAGE:${CIRCLE_SHA1:0:7}-gke-<< parameters.version >>

  build_docker_image:
    parameters:
      binary:
        type: string
        default: "target/x86_64-unknown-linux-musl/release/ingraind"
      tags:
        type: string
    working_directory: /build
    resource_class: large
    docker:
      - image: docker:latest
    steps:
      - checkout
      - attach_workspace:
          at: /build

      - setup_remote_docker

      - run:
          name: Login to the registry
          command: |
            echo ${DOCKER_PASSWORD} | docker login --username ${DOCKER_USERNAME} --password-stdin ${DOCKER_SERVER}

      - run:
          name: Build Docker image
          command: |
            cd /build
            cp << parameters.binary >> .
            docker build --build-arg BINARY_PATH=./ingraind \
                   $(for tag in << parameters.tags >>; do
                      echo -t $DOCKER_IMAGE:$tag
                    done) \
                   /build

            echo "Total sizes"
            docker images $DOCKER_IMAGE
            docker push $DOCKER_IMAGE

  build_rh_binary:
    parameters:
      yum_repo:
        type: string
      kernel_pkg:
        type: string
        default: kernel-devel

    working_directory: /build
    resource_class: large
    docker:
      - image: quay.io/redsift/ingraind-build:fedora
    steps:
      - checkout
      - attach_workspace:
          at: /build

      - run:
          name: Set up kernel for environment
          command: |
            yumdownloader --disablerepo=* --enablerepo=<< parameters.yum_repo >> << parameters.kernel_pkg >>
            rpm --nodeps -i --force << parameters.kernel_pkg >>*.rpm
            echo export KERNEL_SOURCE=/usr/src/kernels/$(basename *.rpm .rpm |sed 's/<< parameters.kernel_pkg >>-//') >> $BASH_ENV

      - cargo_build:
          type: release
          flags: --target=x86_64-unknown-linux-musl
          binary: target/x86_64-unknown-linux-musl/release/ingraind

      - persist_to_workspace:
          root: "./"
          paths:
            - "target"

  build_for_archive_kernel:
    parameters:
      kernel_version:
        type: string
      kernel_pkg:
        type: string
        default: kernel-ml
      distro:
        type: string
        default: el7

    working_directory: /build
    resource_class: large
    docker:
      - image: quay.io/redsift/ingraind-build:fedora
    steps:
      - checkout
      - attach_workspace:
          at: /build

      - run:
          name: Set up kernel for environment
          command: |
            yum install -y s3cmd
            pkg=<< parameters.kernel_pkg >>-devel-<< parameters.kernel_version >>.rpm
            s3cmd get s3://redsift-ops/kernels/<< parameters.distro >>/$pkg $pkg
            rpm --nodeps -i --force $pkg
            echo export KERNEL_SOURCE=/usr/src/kernels/$(rpm -qa kernel-devel |cut -d- -f3-)/ |tee $BASH_ENV

      - cargo_build:
          type: release
          flags: --target=x86_64-unknown-linux-musl
          binary: target/x86_64-unknown-linux-musl/release/ingraind

      - run:
          name: Upload artifact
          command: |
            k_pkg=<< parameters.kernel_version >>
            binary=ingraind-${CIRCLE_SHA1:0:7}-${k_pkg#*-*-}
            mv target/x86_64-unknown-linux-musl/release/ingraind $binary
            echo $RSIGN_SK |sed "s/|/\n/g" >/tmp/rsign_sk
            rsign sign -s /tmp/rsign_sk $binary

            s3cmd put --acl-public --guess-mime-type $binary s3://redsift-ops/ingrain/$binary
            s3cmd put --acl-public --guess-mime-type $binary.minisig s3://redsift-ops/ingrain/$binary.minisig

workflows:
  version: 2.1
  build:
    jobs:
      - terraform_arm:
          name: 'terraform - ubuntu/arm64'
          filters:
            branches:
              ignore: /.*/

      - terraform:
          name: 'terraform - ubuntu 18.04'
          ami: 'ubuntu-1804'
          requires:
            - ubuntu 18.04
          filters:
            branches:
              ignore: /.*/

      - terraform:
          name: 'terraform - fedora 32'
          ami: 'fedora-32'
          binary: 'target/release/ingraind'
          requires:
            - fedora 32
          filters:
            branches:
              ignore: /.*/

      - ubuntu:
          name: "ubuntu 18.04"
          tag: "18.04"
      - build_docker_image:
          name: build ubuntu 18.04 image
          tags: latest-ubuntu-18.04 ${CIRCLE_SHA1:0:7}-ubuntu-18.04 ${CIRCLE_TAG/%/-ubuntu-18.04}
          requires:
            - ubuntu 18.04

      - ubuntu:
          name: "ubuntu 20.04"
          tag: "20.04"

      - fedora:
          name: "fedora 32"

  elrepo7_docker:
    jobs:
      - build_rh_binary:
          context: org-global
          name: build elrepo7
          yum_repo: elrepo7
          kernel_pkg: kernel-ml-devel
      - build_docker_image:
          tags: latest-elrepo7 ${CIRCLE_SHA1:0:7}-elrepo7 ${CIRCLE_TAG/%/-elrepo7}
          requires:
            - build elrepo7
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  elrepo8_docker:
    jobs:
      - build_rh_binary:
          context: org-global
          name: build elrepo8
          yum_repo: elrepo8
          kernel_pkg: kernel-ml-devel
      - build_docker_image:
          tags: latest-elrepo8 ${CIRCLE_SHA1:0:7}-elrepo8 ${CIRCLE_TAG/%/-elrepo7}
          requires:
            - build elrepo8
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  amzn2_docker:
    jobs:
      - build_rh_binary:
          context: org-global
          name: build amzn2
          yum_repo: amzn2-core
      - build_docker_image:
          tags: latest-amzn2 ${CIRCLE_SHA1:0:7}-amzn2 ${CIRCLE_TAG/%/-amzn2}
          requires:
            - build amzn2
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  centos8_docker:
    jobs:
      - build_rh_binary:
          context: org-global
          name: build centos8
          yum_repo: centos8
      - build_docker_image:
          tags: latest-centos8 ${CIRCLE_SHA1:0:7}-centos8 ${CIRCLE_TAG/%/-centos8}
          requires:
            - build centos8
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  gke_docker-4.14:
    jobs:
      - gke:
          name: gke-4.14
          version: 4.14.174
          git_sha: refs/heads/release-R73-11647.B-cos-4.14
      - build_docker_image:
          name: build gke image
          tags: latest-gke ${CIRCLE_SHA1:0:7}-gke-4.14.174 ${CIRCLE_TAG/%/-gke-4.14.174}
          binary: "target/release/ingraind"
          requires:
            - gke-4.14
      - run_test_gke:
          version: 4.14.174
          requires:
            - build gke image
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  gke_docker-4.19:
    jobs:
      - gke:
          name: gke-4.19
          version: 4.19.112
          git_sha: refs/heads/release-R77-12371.B-cos-4.19
      - build_docker_image:
          name: build gke image
          tags: latest-gke ${CIRCLE_SHA1:0:7}-gke-4.19.112 ${CIRCLE_TAG/%/-gke-4.19.112}
          binary: "target/release/ingraind"
          requires:
            - gke-4.19

  build_for_el7:
    jobs:
      - build_for_archive_kernel:
          context: org-global
          kernel_version: 5.6.4-1.el7.elrepo.x86_64
      - build_for_archive_kernel:
          context: org-global
          kernel_version: 5.3.8-1.el7.elrepo.x86_64
